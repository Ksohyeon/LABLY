import styles from "@/styles/Home.module.css";
import Head from "next/head";
import graphql from "@/lib/graphql";
import type { InferGetStaticPropsType, GetStaticProps } from "next";
import ProductList from "@/components/ProductList";
import { useCallback, useEffect, useRef, useState } from "react";
import styled from "styled-components";
import getRecentUpdatedProducts from "@/lib/graphql/queries/getRecentUpdatedProducts";
import { useUser } from "@auth0/nextjs-auth0/client";
import getLikes from "@/lib/graphql/queries/getLikes";
import Image from "next/image";
import image1 from "@/public/assets/images/main1.jpeg";
import image2 from "@/public/assets/images/main2.jpeg";
import NeonText from "@/components/atoms/NeonText";

const ProductListWapper = styled.div`
  display: flex;
  flex-direction: column;
  align-content: center;
  margin: 50px 0;
  & > button {
    margin-top: 20px;
    padding: 10px 0;
    &:hover {
      cursor: pointer;
    }
  }
`;

const ImageGroup = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100vw;
  height: 60vh;
  background-color: black;
  overflow: hidden;
  & > img {
    height: 60vh;
    width: auto;
  }
  .neon1,
  .neon2 {
    position: absolute;
    height: 100px;
  }
  .neon1 {
    transform: rotateZ(-90deg) translateY(-100px);
    left: 0;
  }
  .neon2 {
    right: 0;
    transform: rotateZ(90deg) translateY(-100px);
  }
`;

export type Product = {
  id: string;
  name: string;
  slug: string;
  price: number;
  categories: {
    id: string;
    name: string;
  }[];
  images: {
    id: string;
    url: string;
  }[];
  description?: string;
  like?: boolean;
  likeId: string;
};

export const getStaticProps = (async () => {
  const { products }: { products: Product[] } = await graphql.request(
    getRecentUpdatedProducts,
    {
      first: 60,
    }
  );
  return {
    revalidate: 60,
    props: {
      products,
    },
  };
}) satisfies GetStaticProps<{
  products: Product[];
}>;

export default function Home({
  products,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const productsNumPerPage = useRef(12);
  const [productsState, setProductsState] = useState<Product[]>(products);
  const [pageNum, setPageNum] = useState<number>(1);
  const [visibleProducts, setVisibleProducts] = useState<Product[]>([]);
  const { user } = useUser();

  const getLikesFn = useCallback(async () => {
    const { likes }: { likes: { id: string; slug: string; email: string }[] } =
      await graphql.request(getLikes, {
        email: user?.name || "",
      });
    const likesProducts = likes.map((like) => like.slug);
    const productsWithLike = products.map((product) => {
      if (likesProducts.includes(product.slug)) {
        return {
          ...product,
          like: true,
          likeId: likes[likesProducts.indexOf(product.slug)].id,
        };
      } else return { ...product, like: false };
    });
    console.log("likes: ", likes);
    console.log("likesProducts: ", likesProducts);
    console.log("productsWithLike: ", productsWithLike);
    setProductsState(productsWithLike);
  }, [user, setProductsState]);

  useEffect(() => {
    const sliced = productsState.slice(0, pageNum * productsNumPerPage.current);
    console.log("visibleProduct: ", sliced);
    setVisibleProducts(sliced);
  }, [pageNum, productsState, setVisibleProducts]);

  useEffect(() => {
    getLikesFn();
  }, []);

  return (
    <>
      <Head>
        <title>LABLY</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main}`}>
        <ImageGroup>
          <div className="neon1">
            <NeonText text="LABLY" />
          </div>
          <Image alt="main-img" src={image1} />
          <Image alt="main-img" src={image2} />
          <div className="neon2">
            <NeonText text="LABLY" />
          </div>
        </ImageGroup>
        <ProductListWapper>
          <h2 style={{ textAlign: "center" }}>NEW</h2>
          <br></br>
          <ProductList
            products={visibleProducts}
            setProductsState={setProductsState}
          />
          {products.length !== visibleProducts.length && (
            <button
              onClick={() => {
                setPageNum((prev) => prev + 1);
              }}
            >
              더보기
            </button>
          )}
        </ProductListWapper>
      </main>
    </>
  );
}
